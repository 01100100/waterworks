models:
  - name: staging
    description: >
      Takes JSON data from the bucket for each intersecting_waterway run and loads it into a staging table.
      This data is used to visualize which waterways a route has crossed. The data includes timestamps, 
      Strava activity IDs, Strava owner IDs, and GeoJSON data of intersecting waterways. 🌊🚴‍♂️
    columns:
      - name: datetime
        description: "Timestamp of the event 🕒"
      - name: strava_activity_id
        description: "ID of the Strava activity 🚴‍♂️"
      - name: strava_owner_id
        description: "ID of the Strava owner 👤"
      - name: intersecting_waterways
        description: "GeoJSON data of intersecting waterways crossed 🌍"
      - name: polyline
        description: "Polyline of the route 🚴‍♂️"
      - name: crossings
        description: "Number of crossings 🌊"

  - name: borders
    description: >
      Parses the geojson data of country borders. Each row represents a country border and a RTREE index is created on the geom column. 🌍
    columns:
      - name: country
        description: "Name of the country 🗣️"
      - name: geom
        description: "Geometry of the country border 🌍"

  - name: ways
    description: >
      This table stores events of osm ways tagged with "waterway=*" being crossed. Each row represents a unique crossing event. 🌍
    columns:
      - name: id
        description: "OSM ID of the way 🆔"
      - name: strava_activity_id
        description: "ID of the Strava activity 🚴‍♂️"
      - name: strava_owner_id
        description: "ID of the Strava owner 👤"
      - name: name
        description: "Name of the waterway 🗣️"
      - name: properties
        description: "Properties from OSM 📝"
      - name: geom
        description: "Geometry of the waterway 🌍"
  
  - name: relations
    description: >
      This model enriches osm relations tagged with "waterway=*" which do not exist in the relations table. 🥭
    columns:
      - name: id
        description: "internal OSM ID of the relation with format `relation/{id}` 🆔"
      - name: osm_id
        description: "OSM ID of the relation 🆔"
      - name: strava_activity_id
        description: "ID of the Strava activity 🚴‍♂️"
      - name: strava_owner_id
        description: "ID of the Strava owner 👤"
      - name: name
        description: "Name of the waterway relation 🗣️"
      - name: properties
        description: "Properties from OSM 📝"
      - name: geom
        description: "Geometry of the waterway relation 🌍"

  - name: new_relations
    description: >
      This model contains fresh osm relations tagged with "waterway=*" not seen before.  🥭
    columns:
      - name: id
        description: "Internal id of the relation with format `relation/{id}` 🆔"
      - name: name
        description: "Name of the waterway relation 🗣️"
      - name: properties
        description: "Properties from OSM 📝"
      - name: geom
        description: "Geometry of the waterway relation 🗺️"
      - name: osm_id
        description: "OSM ID of the relation 🆔"
      - name: continent
        description: "Continent of the waterway 🌍"
  
  - name: synthetic_relations
    description: >
      Contains events of waterways tagged with "waterway=*" being crossed. Each row represents a unique crossing event. 🌍

      A synthetic relation is a MultiLineString created by combining LineString features (ways) sharing the same name. This provides a comprehensive representation of fragmented waterways in OSM data. Synthetic relations are used alongside intersecting relations to update activity descriptions with detailed waterway information.

      Notes:
      - Foolishly combines ways with the same name into a MultiLineString.
      - Assigns unique IDs in the format `syntheticRelation/{id}`.
      - Only includes waterways in the bounding box of the activity, therefore synthetic relations are often incomplete.
      - Filters out synthetic relations with matching name to legit OSM relations crossed. Attempt to avoid duplication.
    columns:
      - name: id
        description: "Internal id of the relation with format `relation/{id}` 🆔"
      - name: strava_activity_id
        description: "ID of the Strava activity 🚴‍♂️"
      - name: strava_owner_id
        description: "ID of the Strava owner 👤"
      - name: name
        description: "Name of the waterway relation 🗣️"
      - name: properties
        description: "Properties from OSM 📝"
      - name: geom
        description: "Geometry of the waterway relation 🌍"

  - name: owner
    description: >
      This model aggregates data to provide a summary of activities per Strava user. It calculates the total number of distinct activities and the sum of rivers crossed by each user. 👤🚴‍♂️🌊
    columns:
      - name: strava_owner_id
        description: "ID of the Strava owner 👤"
      - name: total_activities
        description: "Total number of distinct activities by the owner 🚴‍♂️"
      - name: total_rivers_crossed
        description: "Total number of rivers crossed by the owner 🌊"

  - name: country
    description: >
      This model aggregates data to provide a summary of rivers crossed per country. It calculates the total number of rivers crossed in each country. 🌍🌊
    columns:
      - name: country
        description: "Name of the country 🇲🇰"
      - name: total_waterways_crossed
        description: "Total number of waterways crossed in the country 🌊"
      - name: total_crossings
        description: "Total number of activities in the country 🚴‍♂️"
      - name: total_activities
        description: "Total number of distinct activities in the country 🚴‍♂️"

  - name: nominatim_relations
    description: >
      This is a python model that fetches and stores data from the Nominatim API for new relations. It uses friendly rate limiting to be kind to the OSM servers. 🌍
    columns:
      - name: osm_id
        description: "OSM ID of the feature 🆔"
      - name: nominatim_response
        description: "Response data from the Nominatim API 📝"

  - name: stats
    description: >
      Aggregates various counts related to countries, relations, Strava users, and activities. This model provides a summary of the data available in the project.
    columns:
      - name: count_of_countries
        description: "Count of countries with waterways crossed 🌍"
      - name: count_of_relations
        description: "Count of OSM relations 🆔"
      - name: count_of_strava_users
        description: "Count of Strava users 👤"
      - name: count_of_strava_activities
        description: "Count of distinct Strava activities 🚴‍♂️"
      - name: count_of_relation_crossing
        description: "Count of relation crossings 🌊"

seeds:
- name: country_codes
  description: >
    Raw CSV from [github](https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes/blob/master/all/all.csv)

sources:
  - name: external
    description: >
      These sources are external to the project and are fetched from the world wide web 🖥️
    tables:
      - name: raw_borders
        description: >
          Raw GEOJSON data of whole world country borders distributed by [datahub.io](https://datahub.io/core/geo-countries). The data is fetched from [https://r2.datahub.io/clvyjaryy0000la0cxieg4o8o/master/raw/data/countries.geojson](https://datahub.io/core/geo-countries) with [licensing](https://opendatacommons.org/licenses/pddl/).
        config:
          external_location: "st_read('https://r2.datahub.io/clvyjaryy0000la0cxieg4o8o/master/raw/data/countries.geojson')"
      
  
  - name: kreuzungen
    description: >
      Events are created when a new Strava activity is created and the webhook notifies Kreuzungen. The `processAndUpdateStrava` function calculates intersecting waterways using the activity's summary polyline and stores the resulting data in the S3 bucket. This includes the timestamp, Strava activity ID, Strava owner ID, polyline, and GeoJSON data of intersecting waterways.
    freshness:
      warn_after: {count: 1, period: hour}
      error_after: {count: 6, period: hour}
    loaded_at_field:  CAST(datetime AS TIMESTAMP)
    tables:
      - name: raw_waterways
        description: >
          Raw JSON data of waterways intersected by user activities. This data is fetched from an Tigris S3 bucket. Each row is a json file including strava data and geometries 
          and other properties. 🌊📊
        config:
          external_location: "read_json('s3://hydro-xpid/events/*.json')"
        loader: "s3://hydro-xpid/events/*.json"
        columns:
          - name: datetime
            description: "Timestamp of the event 🕒"
          - name: strava_activity_id
            description: "ID of the Strava activity 🚴‍♂️"
          - name: strava_owner_id
            description: "ID of the Strava owner 👤"
          - name: polyline
            description: "Polyline of the route 🗺️ LineString of Strava activity encoded with the [polyline algorithm](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)"
          - name: intersecting_waterways
            description: "GeoJSON data of intersecting waterways 🌍"


exposures:
  - name: kreuzungen
    type: dashboard
    maturity: high
    url: https://kreuzungen.world
    description: >
      Powers the globe visualization of waterways crossed. 🌍🚴‍♂️🌊
    depends_on:
      - ref('country')
      - ref('stats')
    owner:
      name: Dave
      email: contact@kreuzungen.world
